CREATE TABLE IF NOT EXISTS users
(
    USER_ID   INTEGER generated by default as identity primary key ,
    USER_NAME CHARACTER VARYING(100) not null,
    LOGIN     CHARACTER VARYING(50)  not null,
    EMAIL     CHARACTER VARYING(200) not null,
    BIRTHDAY  DATE
    );

create unique index IF NOT EXISTS USERS_EMAIL_UNQ
    on users (EMAIL);

create unique index IF NOT EXISTS USERS_LOGIN_UNQ
    on users (LOGIN);

CREATE TABLE IF NOT EXISTS MPA
(
    MPA_ID INTEGER generated by default as identity primary key,
    MPA_NAME VARCHAR(50)
);

CREATE TABLE IF NOT EXISTS genre
(
    GENRE_ID INTEGER generated by default as identity primary key,
    GENRE_NAME VARCHAR(50)
);

CREATE TABLE IF NOT EXISTS films
(
    FILM_ID INTEGER generated by default as identity primary key,
    FILM_NAME VARCHAR(100),
    DESCRIPTION VARCHAR(200),
    RELEASE_DATE date,
    DURATION INTEGER,
    MPA_ID INTEGER REFERENCES MPA (MPA_ID) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS film_genre
(
    FILM_GENRE_ID INTEGER generated by default as identity primary key,
    FILM_ID INTEGER REFERENCES films (FILM_ID) ON DELETE CASCADE,
    GENRE_ID INTEGER REFERENCES genre (GENRE_ID) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS user_likes
(
    USER_LIKES_ID INTEGER generated by default as identity primary key,
    FILM_ID INTEGER REFERENCES films (FILM_ID) ON DELETE CASCADE,
    USER_ID INTEGER REFERENCES users (USER_ID) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS status
(
    STATUS_ID INTEGER generated by default as identity primary key,
    NAME VARCHAR(100)
);

CREATE TABLE IF NOT EXISTS friend_list
(
    FRIEND_LIST_ID INTEGER generated by default as identity primary key,
    USER_ID INTEGER REFERENCES users (USER_ID) ON DELETE CASCADE,
    FRIEND_ID INTEGER REFERENCES users (USER_ID) ON DELETE CASCADE,
    STATUS_ID INTEGER REFERENCES status (STATUS_ID) ON DELETE CASCADE
);